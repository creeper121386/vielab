#!python
import os
import os.path as osp

import prompt_toolkit
import yaml
from globalenv import *
from prompt_toolkit.auto_suggest import AutoSuggestFromHistory
from prompt_toolkit.completion import Completer, Completion
from prompt_toolkit.formatted_text import HTML
from prompt_toolkit.history import FileHistory
# from pygments.lexers.shell import BashLexer as Lexer
# from prompt_toolkit.lexers import PygmentsLexer
from prompt_toolkit.key_binding import KeyBindings

if len(sys.argv) != 2:
    print('Usage: ./vash <mode>')
    sys.exit()
mode = sys.argv[1]
assert mode in [TRAIN, TEST]

bindings = KeyBindings()


@bindings.add('c-x')
def _(event):
    " Exit when `c-x` is pressed. "
    print('\n* Exited.')
    sys.exit()
    event.app.exit()


class VashCompleter(Completer):
    def __init__(self, conf):
        conf.pop(HYDRA, None)
        conf.pop(DEFAULTS, None)
        self.conf = conf
        self.args_names = list(conf.keys())
        self.groups = [x for x in os.listdir(CONFIG_DIRPATH) if osp.isdir(osp.join(CONFIG_DIRPATH, x))]
        self.args_values = {x: get_field_words(x) for x in self.groups}
        self.args_names.extend(self.groups)
        self.illegal_characters = ('+', ' ', '=')
        self.path_args = [f'{DATA}.{GT}', f'{DATA}.{INPUT}', f'{RUNTIME}.{LUT_FILEPATH}',
                          CHECKPOINT_PATH]

    def get_path(self, text):
        self.get_paths = lambda: ["."]
        try:
            # Directories where to look.
            dirname = os.path.dirname(text)
            if dirname:
                directories = [
                    os.path.dirname(os.path.join(p, text)) for p in self.get_paths()
                ]
            else:
                directories = self.get_paths()

            # Start of current file.
            prefix = os.path.basename(text)

            # Get all filenames.
            filenames = []
            for directory in directories:
                # Look for matches in this directory.
                if os.path.isdir(directory):
                    for filename in os.listdir(directory):
                        if filename.startswith(prefix):
                            filenames.append((directory, filename))

            # Sort
            filenames = sorted(filenames, key=lambda k: k[1])

            # Yield them.
            res = []
            for directory, filename in filenames:
                # completion = filename[len(prefix):]
                completion = filename
                full_name = os.path.join(directory, filename)

                if os.path.isdir(full_name):
                    # For directories, add a slash to the filename.
                    # (We don't add them to the `completion`. Users can type it
                    # to trigger the autocompletion themselves.)
                    filename += "/"

                for y in self.illegal_characters:
                    if y in completion:
                        completion = completion.replace(y, '\\' + y)
                        completion = f"'{completion}'"

                res.append(completion)

            return res
        except OSError:
            pass

    # def merge_dict(self, dicts, res):
    #     d0 = dicts[0]
    #     depths = [x for x in ]
    #     for d in dicts:
    #         d0.update(d)

    def locate_current_node(self, nodes, sub_dict):
        nodes = nodes[:-1]
        current_dict = sub_dict
        for x in nodes[1:]:
            # nodes: value2, value3 ... current_value
            if type(current_dict) == dict and x in current_dict:
                current_dict = current_dict[x]
            else:
                # wrong key
                return None
        return current_dict

    def get_completions(self, document, complete_event):
        # document is the whole string entered by user.
        # string = document._text
        string = document.text_before_cursor
        word_before_cursor = (string
            .split('=')[-1]
            .split('.')[-1]
            .split(' ')[-1])
        position = -len(word_before_cursor)

        last_word = string.split(' ')[-1]
        if '=' in last_word:
            # last word: value1=inputed_arg_value
            # complete a args VALUE
            arg = last_word.split('=')[0]  # name of argument
            inputed_arg_value = last_word.split('=')[-1]  # half-inputed value by user

            # complete path
            if arg in self.path_args:
                prefix = os.path.basename(inputed_arg_value)
                for x in self.get_path(inputed_arg_value):
                    yield Completion(x, start_position=-len(prefix))

            # complete single-level arg value
            if '.' not in arg:
                if arg in self.args_values:
                    # complete group arg value
                    for x in self.args_values[arg]:
                        if x.startswith(inputed_arg_value):
                            yield Completion(x, start_position=position)
            else:
                # complete a multi-level dict node value
                # the value is not a selected-type, skip completion.
                pass

        elif '.' not in last_word:
            # complete a single-level arg NAME
            # last word: value1
            for x in self.args_names:
                if last_word in x:
                    if x in self.conf:
                        yield Completion(x, display=x + f' (default={self.conf[x]})', start_position=position)
                    else:
                        yield Completion(x, start_position=position)

        else:
            # complete a arg multi-level arg name
            # last word: value1.value2.value3
            nodes = last_word.split('.')
            value1 = nodes[0]
            sub_dict = None
            if value1 in self.conf:
                # search in config.yaml
                sub_dict = self.conf[value1]
                if type(sub_dict) != dict:
                    # avoid the situation that self.conf[value1] exists but is a string.
                    sub_dict = None

            elif value1 in self.groups:
                # search in group directory:
                group_dirpath = osp.join(CONFIG_DIRPATH, value1)
                if len(os.listdir(group_dirpath)):
                    # add all yaml files under `group_dirpath` to sub-dict:
                    sub_dict = [
                        yaml.load(open(osp.join(group_dirpath, sample_file), 'r').read(), Loader=yaml.FullLoader)
                        for sample_file in os.listdir(group_dirpath)]

            if type(sub_dict) == dict:
                current_dict = self.locate_current_node(nodes, sub_dict)
                if type(current_dict) == dict:
                    # only complete key
                    for x in current_dict.keys():
                        yield Completion(x, start_position=position)

            elif type(sub_dict) == list:
                # print(sub_dict)
                # type is:  List[ dict ]
                yields = set()
                for d in sub_dict:
                    current_dict = self.locate_current_node(nodes, d)
                    # print(current_dict)
                    if type(current_dict) == dict:
                        # only complete key
                        for x in current_dict.keys():
                            yields.add(x)

                for x in yields:
                    yield Completion(x, start_position=position)


def bottom_toolbar():
    return HTML('Example: name=exp001 ds=local-debug runtime=deeplpf.default aug=crop512')


def get_field_words(field):
    value_list = os.listdir(osp.join(CONFIG_DIRPATH, field))
    # return [field + '=' + x.replace('.yaml', '') for x in value_list]
    return [x.replace('.yaml', '') for x in value_list]


def complete_cmd():
    print('* Initializing vash...')
    total_args = []
    for field in [DATA, RUNTIME, AUGMENTATION]:
        total_args.extend(get_field_words(field))

    conf = yaml.load(open(CONFIG_FILEPATH, 'r').read(), Loader=yaml.FullLoader)
    completer = VashCompleter(conf)
    print('* Initializing VashCompleter...')

    args = prompt_toolkit.prompt(
        f'\n➜ Enter hydra arguments:\n➜ python {mode}.py ',
        completer=completer,
        complete_while_typing=True,
        bottom_toolbar=bottom_toolbar,
        history=FileHistory('../.vielab-history'),
        auto_suggest=AutoSuggestFromHistory(),
        complete_in_thread=True,
        key_bindings=bindings
    )
    cmd = f'ipython {mode}.py {args}'
    console.log(f'Start executing command:\n>>> {cmd.replace("]", "]]").replace("[", "[[")}')
    os.system(cmd)


if __name__ == '__main__':
    complete_cmd()
